<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
 * 관리자 > 로그기록
 * @author 권기완
 * @since 2022. 06. 25.
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *  수정일			수정자			수정내용
 *  ==========    	==========		========================================
 *  2022.06.25.   	권기완          최초 생성

 -->
<mapper namespace="LogManageDAO">
	<!-- 사용자 로그 insert -->
	<update id="createUserLog" parameterType="map">
		INSERT INTO mngr_log_user_info(gid, user_id, user_nm, dept_cd, dept_nm, log_dt)
		SELECT 
			nextval('dsu_cmm_log_user_info_gid'), user_id, user_nm, dep_cd as dept_id, dep_nm || ' ' || dep_dtl_nm as dept_name, now() 
		FROM mngr_user_info
		WHERE user_id=#{loginId};
	</update>
	
 	<!-- 메뉴 로그 insert -->
	<update id="createMenuLog" parameterType="map">
		INSERT INTO mngr_log_menu_info
					(gid,
					 lgc_menu_cd, 
					 lgc_menu_nm, 
					 menu_cd, 
					 menu_nm, 
					 user_id, 
					 user_nm, 
					 dep_cd, 
					 dep_nm, 
					 log_dt)
		SELECT 
			nextval('dsu_cmm_log_menu_info_gid'),
			a.menu_cd,
			a.menu_name,
			a.sub_menu_code,
			a.sub_menu_name,
			b.user_id as user_id, 
			b.user_nm, 
			b.dep_cd as dept_id, 
			b.dep_dtl_nm as dept_name,
			now()
		FROM 
			(
			SELECT 
				menu_cd,
				coalesce((select menu_nm from mngr_menu_mng where menu_cd = (select menu_cd from mngr_menu_mng where menu_cd=#{menuCode}) ), menu_nm)  as menu_name,
				menu_cd as sub_menu_code, menu_nm as sub_menu_name
			FROM  mngr_menu_mng 
			WHERE menu_cd = #{menuCode}
			) a, mngr_user_info b
		WHERE b.user_id = #{loginId};
	</update>
	
	<!-- 로그 관리 날짜 가져오기 -->
	<select id="selectLogDate" resultType="resultCamelMap">
		select min(to_char(LOG_DT, 'YYYY-MM')) as min, max(to_char(LOG_DT, 'YYYY-MM')) as max from mngr_log_menu_info;
	
	</select>
	
	<!-- 누적 방문자수 통계 -->
	<select id="selectLogTotalVisitor" resultType="resultCamelMap">
		select COALESCE(sum(cnt),0) as visitor
		  from (
				select count(DISTINCT user_id) as cnt 
				  from mngr_log_user_info 
				 where 1=1
			  group by user_id, to_char(LOG_DT, 'yyyymmdd')
			   ) a	
	
	</select>
	
	<!-- 누적 방문횟수 통계 -->
	<select id="selectLogTotalCnt" resultType="resultCamelMap">
		select COALESCE(sum(cnt),0) as visitor_cnt
		  from (
				select count(user_id) as cnt 
				  from mngr_log_user_info 
				 where 1=1
			  group by user_id
			   ) a	
	
	</select>
	
	<!-- 누적 페이지뷰 통계 -->
	<select id="selectLogTotalView" resultType="resultCamelMap">
		select COALESCE(count(1),0) page_view
		  from mngr_log_user_info
	
	</select>
	
	<!-- 사용자 유저(월별) 로그 CNT -->
	<select id="selectLogUserMonthCnt" parameterType="map" resultType="resultCamelMap">
		select a.page_cnt, b.visitor, c.visitor_cnt, a.start_date as start_date
	       from (
		        select  to_char(log_dt, 'yyyymm') as start_date, count(1) as page_cnt
				  from mngr_log_menu_info a
				 where 1=1
				 <![CDATA[	
		   		   and to_char(a.log_dt, 'YYYYMM') >= date_trunc('month', to_date(#{startDate}, 'yyyymmdd')::date - interval '6 month')::text
		  		   and to_char(a.log_dt, 'YYYYMM') <= #{startDate}
	  		     ]]>	
		  		group by to_char(a.log_dt, 'yyyymm')
				) a, 
				(
				select sum(cnt) as visitor, start_date
				  from (
						select count(DISTINCT user_id) as cnt , to_char(LOG_DT, 'yyyymm') as start_date
						  from mngr_log_user_info 
						 where 1=1
					  group by user_id, to_char(LOG_DT, 'yyyymmdd'), to_char(LOG_DT, 'yyyymm')
					   ) a	
				group by start_date	   
				) b,
				(
				select sum(cnt) as visitor_cnt, start_date
				  from (
						select count(user_id) as cnt , to_char(LOG_DT, 'yyyymm') as start_date
						  from mngr_log_user_info 
						 where 1=1
					  group by user_id, to_char(LOG_DT, 'yyyymm')
					   ) a	
				   group by start_date	   
				) c
				where 1=1
				  and a.start_date = b.start_date
				  and b.start_date = c.start_date
				group by a.start_date, b.visitor, c.visitor_cnt, a.page_cnt
		
		<!-- <![CDATA[	
		select count(1) as cnt, to_char(start_date, 'yyyymm') as start_date
         from (
          select  
				case when a.log_dt >= date_trunc('month', to_date('202109', 'yyyymmdd')::date)::date and a.log_dt <= date_trunc('month', to_date('202109', 'yyyymmdd')::date + interval '1 months')::date then date_trunc('month', to_date('202109', 'yyyymmdd')::date)::date 
				     when a.log_dt >= date_trunc('month', to_date('202109', 'yyyymmdd')::date - interval '1 month')::date and a.log_dt <= date_trunc('month', to_date('202109', 'yyyymmdd')::date)::date then date_trunc('month', to_date('202109', 'yyyymmdd')::date - interval '1 month')::date
				     when a.log_dt >= date_trunc('month', to_date('202109', 'yyyymmdd')::date - interval '2 month')::date and a.log_dt <= date_trunc('month', to_date('202109', 'yyyymmdd')::date - interval '1 month')::date then date_trunc('month', to_date('202109', 'yyyymmdd')::date - interval '2 month')::date					     
				     when a.log_dt >= date_trunc('month', to_date('202109', 'yyyymmdd')::date - interval '3 month')::date and a.log_dt <= date_trunc('month', to_date('202109', 'yyyymmdd')::date - interval '2 month')::date then date_trunc('month', to_date('202109', 'yyyymmdd')::date - interval '3 month')::date
				     when a.log_dt >= date_trunc('month', to_date('202109', 'yyyymmdd')::date - interval '4 month')::date and a.log_dt <= date_trunc('month', to_date('202109', 'yyyymmdd')::date - interval '3 month')::date then date_trunc('month', to_date('202109', 'yyyymmdd')::date - interval '4 month')::date
				     when a.log_dt >= date_trunc('month', to_date('202109', 'yyyymmdd')::date - interval '5 month')::date and a.log_dt <= date_trunc('month', to_date('202109', 'yyyymmdd')::date - interval '4 month')::date then date_trunc('month', to_date('202109', 'yyyymmdd')::date - interval '5 month')::date
				     else date_trunc('month', to_date('202109', 'yyyymmdd')::date - interval '6 month')::date end as start_date
		from mng_log_menu_info a
		where 1=1
	    	and to_char(a.log_dt, 'YYYYMM') >= date_trunc('month', to_date(#{startDate}, 'yyyymmdd')::date - interval '6 month')::text
	   		and to_char(a.log_dt, 'YYYYMM') <= #{startDate}
   		]]>	
		<if test="subMenuCode != '' and subMenuCode != null">   
			and lwrt_menu_cd = #{subMenuCode}
		</if>
		<if test="serviceMenu != '' and serviceMenu != null">  	
			and a.sub_menu_code in (select c.sub_menu_cd from mng_menu_info as c where (c.menu_cd =  #{serviceMenu} or c.sub_menu_cd = #{serviceMenu}))
		</if>
		<if test="searchServiceUserInfo != '' and searchServiceUserInfo != null">  	
			and a.user_nm like #{searchServiceUserInfo}||'%'    
		</if>	
			and a.menu_cd not in('MENU_00003', 'MENU_00006', 'MENU_00007', 'MENU_00008', 'MENU_00009', 'MENU_00010', 'MENU_00011', 'MENU_00012', 'MENU_00013', 'MENU_00014', 'MENU_00015', 'MENU_00016', 'MENU_00017', 'MENU_00018', 'MENU_00019')
		) a  
		group by start_date
	 -->
	</select>
	
	<!-- 사용자 유저 로그(요일별) cnt 조회 -->
	<select id="selectLogUserDayCnt" parameterType="map" resultType="resultCamelMap">
		select a.page_cnt, b.visitor, c.visitor_cnt, 
	 		a.start_date
       from  (
              select b.date as start_date, case when  a.page_cnt is null then 0 else a.page_cnt end as page_cnt
			    from (
		          	  select  
						case when EXTRACT(DOW FROM a.log_dt) = 0 then '일요일' 
						     when EXTRACT(DOW FROM a.log_dt) = 1 then '월요일'
						     when EXTRACT(DOW FROM a.log_dt) = 2 then '화요일'					     
						     when EXTRACT(DOW FROM a.log_dt) = 3 then '수요일'
						     when EXTRACT(DOW FROM a.log_dt) = 4 then '목요일'
						     when EXTRACT(DOW FROM a.log_dt) = 5 then '금요일'
						     else '토요일' end as start_date,
						     count(1) as page_cnt
					    from mngr_log_menu_info a
					   where 1=1
			     		 and to_char(a.log_dt, 'YYYYMM') = #{startDate}
					   <if test="searchServiceUserInfo != '' and searchServiceUserInfo != null">  	
						 and a.user_nm like #{searchServiceUserInfo}||'%'    
					   </if>
					    and a.menu_cd != 'MENU_00002'
						and a.lgc_menu_cd not in('MENU_00003', 'MENU_00006', 'MENU_00007', 'MENU_00008', 'MENU_00009', 'MENU_00010', 'MENU_00011', 'MENU_00012', 'MENU_00013', 'MENU_00014', 'MENU_00015', 'MENU_00016', 'MENU_00017', 'MENU_00018', 'MENU_00019')
					     group by EXTRACT(DOW FROM a.log_dt)
					  ) a right join (select regexp_split_to_table('일요일,월요일,화요일,수요일,목요일,금요일,토요일', ',') as date, 0 as cnt) b
					  on b.date = a.start_date
				) a ,
				( 
				 select b.date as start_date, case when  a.visitor is null then 0 else a.visitor end as visitor
				   from (
						select count(DISTINCT user_id) as visitor , 
							   case when EXTRACT(DOW FROM log_dt) = 0 then '일요일' 
							     when EXTRACT(DOW FROM log_dt) = 1 then '월요일'
							     when EXTRACT(DOW FROM log_dt) = 2 then '화요일'					     
							     when EXTRACT(DOW FROM log_dt) = 3 then '수요일'
							     when EXTRACT(DOW FROM log_dt) = 4 then '목요일'
							     when EXTRACT(DOW FROM log_dt) = 5 then '금요일'
							     else '토요일' end as start_date
						  from mngr_log_user_info 
						 where 1=1
					       and to_char(log_dt, 'YYYYMM') = #{startDate}
					<if test="searchServiceUserInfo != '' and searchServiceUserInfo != null">  	
						and a.user_nm like #{searchServiceUserInfo}||'%'    
					</if>	
					  group by  EXTRACT(DOW FROM log_dt)
					  ) a right join (select regexp_split_to_table('일요일,월요일,화요일,수요일,목요일,금요일,토요일', ',') as date, 0 as cnt) b
					  on b.date = a.start_date
				) b,
				( 
				select b.date as start_date, case when  a.visitor_cnt is null then 0 else a.visitor_cnt end as visitor_cnt
				  from (
						select count(user_id) as visitor_cnt , 
						       case when EXTRACT(DOW FROM log_dt) = 0 then '일요일' 
							     when EXTRACT(DOW FROM log_dt) = 1 then '월요일'
							     when EXTRACT(DOW FROM log_dt) = 2 then '화요일'					     
							     when EXTRACT(DOW FROM log_dt) = 3 then '수요일'
							     when EXTRACT(DOW FROM log_dt) = 4 then '목요일'
							     when EXTRACT(DOW FROM log_dt) = 5 then '금요일'
							     else '토요일' end as start_date
						  from mngr_log_user_info 
						 where 1=1
					       and to_char(log_dt, 'YYYYMM') = #{startDate}
					   <if test="searchServiceUserInfo != '' and searchServiceUserInfo != null">  	
						   and user_nm like #{searchServiceUserInfo}||'%'    
					   </if>	
					  group by EXTRACT(DOW FROM log_dt)
				  ) a right join (select regexp_split_to_table('일요일,월요일,화요일,수요일,목요일,금요일,토요일', ',') as date, 0 as cnt) b
				  on b.date = a.start_date
				) c
			where 1=1
			  and a.start_date = b.start_date 
			  and b.start_date = c.start_date
	   order by a.start_date = '토요일', a.start_date = '금요일', a.start_date = '목요일', a.start_date = '수요일', a.start_date = '화요일',  a.start_date = '월요일', a.start_date = '일요일'
	</select>

	<!-- 사용자 유저 로그(페이지 방문 현황) 데이터 조회 -->
	<select id="selectLogUserPageView" parameterType="map" resultType="resultCamelMap">
	
		select a.menu_cd as sub_menu_code, 
               b.menu_url as menu_link,
			   a.menu_nm as sub_menu_name, 
			   count(1) as cnt
		 from mngr_log_menu_info a, mngr_menu_mng b
	    where 1=1
	      and to_char(a.log_dt, 'YYYYMM') = #{startDate}
	      and a.menu_cd = b.menu_cd
	      and a.menu_cd != 'MENU_00002'
	    <if test="subMenuCode != '' and subMenuCode != null">   
		  and menu_cd = #{subMenuCode}
		</if>
		<if test="searchServiceUserInfo != '' and searchServiceUserInfo != null">  	
		  and a.user_nm like #{searchServiceUserInfo}||'%'    
		</if>  
		  and a.lgc_menu_cd not in('MENU_00003', 'MENU_00006', 'MENU_00007', 'MENU_00008', 'MENU_00009', 'MENU_00010', 'MENU_00011', 'MENU_00012', 'MENU_00013', 'MENU_00014', 'MENU_00015', 'MENU_00016', 'MENU_00017', 'MENU_00018', 'MENU_00019')
		group by a.menu_cd, a.menu_nm, b.menu_url
		order by cnt desc, a.menu_cd, a.menu_nm
	
	</select>
	
	<select id="selectLogDetailView" parameterType="map" resultType="resultCamelMap">
		select
			a.menu_nm as sub_menu_name,
			b.menu_url as menu_link,
			to_char(a.log_dt, 'YYYY-MM-DD HH24:MI:SS') log_dt
		from mngr_log_menu_info a, mngr_menu_mng b
		where to_char(a.log_dt, 'YYYYMM') = #{startDate}
	      and a.menu_cd =b.menu_cd
	      and a.menu_cd != 'MENU_00002'
		  and a.lgc_menu_cd not in('MENU_00003', 'MENU_00006', 'MENU_00007', 'MENU_00008', 'MENU_00009', 'MENU_00010', 'MENU_00011', 'MENU_00012', 'MENU_00013', 'MENU_00014', 'MENU_00015', 'MENU_00016', 'MENU_00017', 'MENU_00018', 'MENU_00019')
		order by a.log_dt desc
	</select>	


</mapper>